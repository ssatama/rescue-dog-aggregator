/**
 * Test for Organizations Console Error Fix
 *
 * This test verifies that successful organization loading no longer
 * generates console errors by using logger.info instead of reportError
 */
import { render, screen, waitFor } from "@testing-library/react";
import "@testing-library/jest-dom";
import OrganizationsClient from "../../app/organizations/OrganizationsClient";
import { getEnhancedOrganizations } from "../../services/organizationsService";
import { logger, reportError } from "../../utils/logger";

// Mock services
jest.mock("../../services/organizationsService");

// Mock logger and reportError
jest.mock("../../utils/logger", () => ({
  logger: {
    info: jest.fn(),
    log: jest.fn(),
    error: jest.fn(),
    warn: jest.fn(),
    debug: jest.fn(),
  },
  reportError: jest.fn(),
}));

// Mock Layout component
jest.mock("../../components/layout/Layout", () => {
  return function MockLayout({ children }) {
    return <div data-testid="layout">{children}</div>;
  };
});

const mockOrganizations = [
  {
    id: 1,
    name: "Test Organization",
    total_dogs: 10,
    recent_dogs: [{ id: 1, name: "Test Dog" }],
  },
];

describe("Organizations Console Error Fix", () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test("successful organizations loading uses logger.info instead of reportError", async () => {
    // Mock successful API response
    getEnhancedOrganizations.mockResolvedValue(mockOrganizations);

    render(<OrganizationsClient />);

    // Wait for organizations to load
    await waitFor(() => {
      expect(screen.getByText("Test Organization")).toBeInTheDocument();
    });

    // Verify that logger.info was called for success (not reportError)
    expect(logger.info).toHaveBeenCalledWith(
      "Organizations loaded successfully",
      {
        count: 1,
        withStats: 1,
        withRecentDogs: 1,
      },
    );

    // Verify that reportError was NOT called for success
    expect(reportError).not.toHaveBeenCalledWith(
      expect.stringContaining("successfully"),
      expect.any(Object),
    );
  });

  test("error cases still use reportError correctly", async () => {
    // Mock API error
    const testError = new Error("Test API error");
    getEnhancedOrganizations.mockRejectedValue(testError);

    render(<OrganizationsClient />);

    // Wait for error to be processed
    await waitFor(() => {
      expect(
        screen.getByText(
          "There was an error loading organizations. Please try again later.",
        ),
      ).toBeInTheDocument();
    });

    // Verify that reportError was called for actual error
    expect(reportError).toHaveBeenCalledWith(
      "Error fetching enhanced organizations",
      {
        error: "Test API error",
        stack: expect.any(String),
      },
    );

    // Verify that logger.info was NOT called on error
    expect(logger.info).not.toHaveBeenCalled();
  });

  test("no console errors are generated on successful load", async () => {
    // Mock successful API response
    getEnhancedOrganizations.mockResolvedValue(mockOrganizations);

    // Spy on console.error to ensure no errors are logged
    const consoleErrorSpy = jest
      .spyOn(console, "error")
      .mockImplementation(() => {});

    render(<OrganizationsClient />);

    // Wait for organizations to load
    await waitFor(() => {
      expect(screen.getByText("Test Organization")).toBeInTheDocument();
    });

    // Verify no console errors were generated by our success logging
    expect(consoleErrorSpy).not.toHaveBeenCalledWith(
      "Error:",
      "Organizations loaded successfully",
      "Context:",
      expect.any(Object),
    );

    consoleErrorSpy.mockRestore();
  });
});
