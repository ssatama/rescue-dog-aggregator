#!/bin/bash
"""
Database Operations Cron Job Setup Script
Rescue Dog Aggregator - Production Database Automation

This script sets up automated cron jobs for:
- Daily database backups at 2 AM
- Weekly base backups on Sunday at 1 AM  
- Hourly health checks during business hours
- Daily maintenance tasks
- Monthly backup restore testing

Usage:
    sudo ./setup_cron_jobs.sh [install|remove|status]
"""

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname $(dirname $SCRIPT_DIR))"
PYTHON_PATH="/usr/bin/python3"  # Adjust for your Python installation
ADMIN_EMAIL="admin@example.com"  # Change to your admin email

# Cron job definitions
CRON_JOBS=(
    # Daily backup at 2 AM
    "0 2 * * * cd $SCRIPT_DIR && $PYTHON_PATH backup_automation.py daily --email=$ADMIN_EMAIL >> /var/log/db_backup_daily.log 2>&1"
    
    # Weekly backup on Sunday at 1 AM
    "0 1 * * 0 cd $SCRIPT_DIR && $PYTHON_PATH backup_automation.py weekly --email=$ADMIN_EMAIL >> /var/log/db_backup_weekly.log 2>&1"
    
    # Health check every hour during business hours (9 AM - 6 PM)
    "0 9-18 * * * cd $PROJECT_ROOT/database/monitoring && $PYTHON_PATH db_health_check.py --alert-email=$ADMIN_EMAIL >> /var/log/db_health_check.log 2>&1"
    
    # Daily maintenance at 3 AM on weekdays
    "0 3 * * 1-5 cd $SCRIPT_DIR && ./weekly_maintenance.sh >> /var/log/db_maintenance.log 2>&1"
    
    # Monthly backup restore test on first Sunday at 4 AM
    "0 4 1-7 * 0 cd $SCRIPT_DIR && $PYTHON_PATH backup_automation.py test-restore --email=$ADMIN_EMAIL >> /var/log/db_backup_test.log 2>&1"
    
    # Daily backup cleanup at 5 AM
    "0 5 * * * cd $SCRIPT_DIR && $PYTHON_PATH backup_automation.py cleanup >> /var/log/db_backup_cleanup.log 2>&1"
)

install_cron_jobs() {
    echo "Installing database maintenance cron jobs..."
    
    # Create log directory if it doesn't exist
    sudo mkdir -p /var/log/database
    
    # Create maintenance script
    create_maintenance_script
    
    # Add jobs to root crontab (for system-level database operations)
    (sudo crontab -l 2>/dev/null; printf '%s\n' "${CRON_JOBS[@]}") | sudo crontab -
    
    echo "Cron jobs installed successfully!"
    echo "Log files will be written to /var/log/"
    echo ""
    echo "Installed jobs:"
    for job in "${CRON_JOBS[@]}"; do
        echo "  $job"
    done
    
    echo ""
    echo "To view current cron jobs: sudo crontab -l"
    echo "To remove cron jobs: $0 remove"
}

remove_cron_jobs() {
    echo "Removing database maintenance cron jobs..."
    
    # Get current crontab
    current_crontab=$(sudo crontab -l 2>/dev/null)
    
    # Remove our jobs
    new_crontab=""
    while IFS= read -r line; do
        skip=false
        for job in "${CRON_JOBS[@]}"; do
            # Extract the command part (after the time specification)
            job_command=$(echo "$job" | sed 's/^[0-9\*\-\,\/\s]\+//')
            line_command=$(echo "$line" | sed 's/^[0-9\*\-\,\/\s]\+//')
            
            if [[ "$line_command" == *"backup_automation.py"* ]] || 
               [[ "$line_command" == *"db_health_check.py"* ]] || 
               [[ "$line_command" == *"weekly_maintenance.sh"* ]]; then
                skip=true
                break
            fi
        done
        
        if [[ "$skip" == false ]] && [[ -n "$line" ]]; then
            new_crontab="$new_crontab$line\n"
        fi
    done <<< "$current_crontab"
    
    # Install cleaned crontab
    printf '%b' "$new_crontab" | sudo crontab -
    
    echo "Database maintenance cron jobs removed."
}

show_status() {
    echo "Database Maintenance Cron Jobs Status"
    echo "====================================="
    
    current_crontab=$(sudo crontab -l 2>/dev/null)
    
    if [[ -z "$current_crontab" ]]; then
        echo "No cron jobs found."
        return
    fi
    
    echo "Active database-related cron jobs:"
    echo ""
    
    while IFS= read -r line; do
        if [[ "$line" == *"backup_automation.py"* ]] || 
           [[ "$line" == *"db_health_check.py"* ]] || 
           [[ "$line" == *"weekly_maintenance.sh"* ]]; then
            echo "  ✓ $line"
        fi
    done <<< "$current_crontab"
    
    echo ""
    echo "Log files location: /var/log/"
    echo "Recent backup logs:"
    
    for log_file in db_backup_daily.log db_backup_weekly.log db_health_check.log; do
        if [[ -f "/var/log/$log_file" ]]; then
            echo "  $log_file: $(tail -1 /var/log/$log_file 2>/dev/null || echo 'No entries')"
        fi
    done
}

create_maintenance_script() {
    cat > "$SCRIPT_DIR/weekly_maintenance.sh" << 'EOF'
#!/bin/bash
# Weekly database maintenance script
# Auto-generated by setup_cron_jobs.sh

echo "Starting weekly database maintenance - $(date)"

# Source environment if available
if [[ -f ~/.bashrc ]]; then
    source ~/.bashrc
fi

# Database connection parameters
DB_NAME="rescue_dogs"

# Update table statistics
echo "Updating table statistics..."
psql -d "$DB_NAME" -c "ANALYZE;" || echo "ANALYZE failed"

# Vacuum tables to reclaim space
echo "Vacuuming tables..."
psql -d "$DB_NAME" -c "VACUUM (ANALYZE, VERBOSE) animals;" || echo "VACUUM animals failed"
psql -d "$DB_NAME" -c "VACUUM (ANALYZE, VERBOSE) organizations;" || echo "VACUUM organizations failed"
psql -d "$DB_NAME" -c "VACUUM (ANALYZE, VERBOSE) scrape_logs;" || echo "VACUUM scrape_logs failed"

# Check for unused indexes
echo "Checking for unused indexes..."
psql -d "$DB_NAME" -c "
    SELECT schemaname, tablename, indexname, idx_scan
    FROM pg_stat_user_indexes
    WHERE idx_scan = 0
      AND schemaname = 'public'
    ORDER BY schemaname, tablename, indexname;" || echo "Index check failed"

# Check database size
echo "Database size information:"
psql -d "$DB_NAME" -c "
    SELECT 
        pg_size_pretty(pg_database_size('$DB_NAME')) as database_size,
        pg_size_pretty(pg_total_relation_size('animals')) as animals_table_size;" || echo "Size check failed"

echo "Weekly maintenance completed - $(date)"
EOF

    chmod +x "$SCRIPT_DIR/weekly_maintenance.sh"
    echo "Created maintenance script: $SCRIPT_DIR/weekly_maintenance.sh"
}

verify_dependencies() {
    echo "Verifying dependencies..."
    
    # Check if PostgreSQL client tools are available
    if ! command -v psql &> /dev/null; then
        echo "ERROR: psql command not found. Please install PostgreSQL client tools."
        exit 1
    fi
    
    if ! command -v pg_dump &> /dev/null; then
        echo "ERROR: pg_dump command not found. Please install PostgreSQL client tools."
        exit 1
    fi
    
    # Check if Python is available
    if ! command -v "$PYTHON_PATH" &> /dev/null; then
        echo "ERROR: Python not found at $PYTHON_PATH. Please adjust PYTHON_PATH in this script."
        exit 1
    fi
    
    # Check if backup and monitoring scripts exist
    if [[ ! -f "$SCRIPT_DIR/backup_automation.py" ]]; then
        echo "ERROR: backup_automation.py not found in $SCRIPT_DIR"
        exit 1
    fi
    
    if [[ ! -f "$PROJECT_ROOT/database/monitoring/db_health_check.py" ]]; then
        echo "ERROR: db_health_check.py not found in $PROJECT_ROOT/database/monitoring/"
        exit 1
    fi
    
    echo "All dependencies verified ✓"
}

print_usage() {
    echo "Usage: $0 [install|remove|status]"
    echo ""
    echo "Commands:"
    echo "  install  - Install all database maintenance cron jobs"
    echo "  remove   - Remove all database maintenance cron jobs"  
    echo "  status   - Show current status of cron jobs"
    echo ""
    echo "Before running, please update the following variables in this script:"
    echo "  ADMIN_EMAIL - Email address for notifications"
    echo "  PYTHON_PATH - Path to Python executable"
}

# Main script logic
case "${1:-status}" in
    install)
        verify_dependencies
        install_cron_jobs
        ;;
    remove)
        remove_cron_jobs
        ;;
    status)
        show_status
        ;;
    *)
        print_usage
        exit 1
        ;;
esac