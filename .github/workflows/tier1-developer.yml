# Developer Workflow - Tier 1: Fast feedback for active development
# Target: <30 seconds execution time
# Scope: 587 unit/fast tests for rapid iteration
# Triggered on: Feature branch pushes, draft PRs

name: Tier 1 - Developer Feedback

on:
  push:
    branches:
      - "feature/**"
      - "fix/**"
      - "hotfix/**"
    paths:
      - "api/**"
      - "scrapers/**"
      - "services/**"
      - "utils/**"
      - "tests/**"
  pull_request:
    types: [opened, synchronize]
    branches: [main, develop]
    paths:
      - "api/**"
      - "scrapers/**"
      - "services/**"
      - "utils/**"
      - "tests/**"
  workflow_dispatch:

jobs:
  fast-feedback:
    name: Fast Developer Tests
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: dev-${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            dev-${{ runner.os }}-pip-

      - name: Install dependencies (minimal)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Install only essential test dependencies for speed
          pip install pytest pytest-mock pytest-cov

      - name: Verify environment
        run: |
          python --version
          pytest --version
          echo "Test markers available:"
          pytest --markers | grep -E "(unit|fast)" | head -5

      - name: Run Tier 1 - Developer Feedback Tests
        env:
          PYTHONPATH: .
          CI: true
          PYTEST_TIMEOUT: 120 # 2 minute timeout for entire test run
        run: |
          echo "🚀 Starting Tier 1 Developer Feedback Tests"
          echo "⚡ Target: 587 tests in <30 seconds"

          start_time=$(date +%s)

          pytest \
            -m "unit or fast" \
            --maxfail=5 \
            -x \
            --tb=short \
            --no-header \
            --disable-warnings \
            --quiet \
            --durations=5 \
            --cov=api \
            --cov=scrapers \
            --cov=services \
            --cov=utils \
            --cov-report=term-missing:skip-covered

          end_time=$(date +%s)
          duration=$((end_time - start_time))

          echo ""
          echo "⏱️  Execution time: ${duration}s"
          echo "🎯 Target achieved: <30s"

          if [ $duration -gt 30 ]; then
            echo "⚠️  Warning: Exceeds 30s target, consider optimization"
          else
            echo "✅ Performance target met"
          fi

      - name: Quick lint check (Python)
        if: success()
        run: |
          pip install flake8 black
          echo "🔍 Quick code quality check"

          # Fast linting - only check changed files
          git diff --name-only HEAD~1 | grep '\.py$' | head -10 | xargs -r flake8 --max-line-length=120 --extend-ignore=E203,W503 || true

          echo "✅ Code quality check complete"

      - name: Development feedback
        if: always()
        run: |
          echo ""
          echo "=== TIER 1 DEVELOPER FEEDBACK ==="
          echo "🎯 Purpose: Rapid iteration during active development"
          echo "⚡ Speed: <30 seconds for immediate feedback"
          echo "🧪 Coverage: 587 unit/fast tests (pure logic, no I/O)"
          echo ""
          echo "💡 Usage Tips:"
          echo "  - Run locally: pytest -m 'unit or fast' --maxfail=5 -x"
          echo "  - For debugging: pytest -m 'unit or fast' -v --tb=long"
          echo "  - Before commit: Use Tier 2 (CI Pipeline) tests"
          echo ""

          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ All fast tests passed - continue development!"
          else
            echo "❌ Some tests failed - fix before proceeding"
          fi

  frontend-quick-check:
    name: Frontend Quick Check
    runs-on: ubuntu-latest
    timeout-minutes: 3
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies (fast)
        run: npm ci --prefer-offline --no-audit

      - name: Quick test run
        run: |
          echo "⚡ Running essential frontend tests"
          npm test -- --passWithNoTests --watchAll=false --testTimeout=5000 --maxWorkers=2 --silent

      - name: Type check
        run: npx tsc --noEmit --skipLibCheck

  developer-summary:
    name: Developer Summary
    runs-on: ubuntu-latest
    needs: [fast-feedback, frontend-quick-check]
    if: always()

    steps:
      - name: Provide development feedback
        run: |
          backend_result="${{ needs.fast-feedback.result }}"
          frontend_result="${{ needs.frontend-quick-check.result }}"

          echo "=== DEVELOPER FEEDBACK SUMMARY ==="
          echo ""
          echo "Backend Unit Tests: $backend_result"
          echo "Frontend Quick Check: $frontend_result"
          echo ""

          if [[ "$backend_result" = "success" ]] && [[ "$frontend_result" = "success" ]]; then
            echo "✅ All fast checks passed!"
            echo "🚀 Continue development confidently"
            echo ""
            echo "Next steps:"
            echo "  1. Ready to commit? Run Tier 2 tests locally"
            echo "  2. pytest -m 'not slow and not browser and not external' --maxfail=3"
            echo "  3. Before PR: Tier 2 will run automatically on push"
          else
            echo "❌ Some checks failed"
            echo ""
            echo "Quick fixes:"
            echo "  1. Check the failed tests above"
            echo "  2. Fix issues locally: pytest -m 'unit or fast' -v"
            echo "  3. For frontend: npm test -- --watchAll=false"
          fi

          echo ""
          echo "📊 This ran ~587 backend + frontend unit tests"
          echo "⚡ Target: Complete in <30 seconds for instant feedback"
