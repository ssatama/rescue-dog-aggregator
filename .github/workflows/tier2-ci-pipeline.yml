# CI Pipeline - Tier 2: Core functionality tests for pull requests
# Target: <5 minutes execution time
# Scope: 951 tests without slow/browser/external dependencies

name: Tier 2 - CI Pipeline

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'api/**'
      - 'scrapers/**' 
      - 'services/**'
      - 'utils/**'
      - 'tests/**'
      - 'requirements*.txt'
      - 'pytest.ini'
      - '.github/workflows/**'
  push:
    branches: [ main, develop ]
    paths:
      - 'api/**'
      - 'scrapers/**'
      - 'services/**' 
      - 'utils/**'
      - 'tests/**'
      - 'requirements*.txt'
      - 'pytest.ini'

jobs:
  backend-tests:
    name: Backend CI Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]
        
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: rescue_dogs_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Verify pytest configuration
      run: |
        pytest --markers | grep -E "(unit|integration|slow|browser|external)"

    - name: Run Tier 2 CI Tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/rescue_dogs_test
        PYTHONPATH: .
        CI: true
      run: |
        pytest \
          -m "not slow and not browser and not external" \
          --maxfail=3 \
          --tb=short \
          --durations=10 \
          --cov=api \
          --cov=scrapers \
          --cov=services \
          --cov=utils \
          --cov-report=xml \
          --cov-report=term-missing \
          --junit-xml=test-results.xml \
          --disable-warnings

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: success()
      with:
        file: ./coverage.xml
        flags: backend-tier2
        name: tier2-coverage

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-results.xml
          coverage.xml

    - name: Performance Check
      if: success()
      run: |
        echo "✅ Tier 2 CI Pipeline completed successfully"
        echo "📊 Expected: ~951 tests in <5 minutes"
        echo "🚀 Ready for merge review"

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: |
        npm test -- --coverage --watchAll=false --maxWorkers=2

    - name: Build check
      run: npm run build

  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: always()
    
    steps:
    - name: Check CI Results
      run: |
        if [[ "${{ needs.backend-tests.result }}" != "success" ]] || [[ "${{ needs.frontend-tests.result }}" != "success" ]]; then
          echo "❌ CI Pipeline failed - PR cannot be merged"
          exit 1
        else
          echo "✅ All Tier 2 tests passed - PR ready for review"
        fi