# CI Pipeline - Tier 2: Core functionality tests for pull requests
# Target: <5 minutes execution time
# Scope: 951 tests without slow/browser/external dependencies

name: Tier 2 - CI Pipeline

on:
  pull_request:
    branches: [main, develop]
    paths:
      - "api/**"
      - "scrapers/**"
      - "services/**"
      - "utils/**"
      - "tests/**"
      - "requirements*.txt"
      - "pytest.ini"
      - ".github/workflows/**"
  push:
    branches: [main, develop]
    paths:
      - "api/**"
      - "scrapers/**"
      - "services/**"
      - "utils/**"
      - "tests/**"
      - "requirements*.txt"
      - "pytest.ini"

jobs:
  backend-tests:
    name: Backend CI Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_rescue_dogs
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Wait for PostgreSQL
        run: |
          for i in {1..10}; do
            if pg_isready -h localhost -p 5432; then
              echo "PostgreSQL is ready"
              break
            fi
            echo "Waiting for PostgreSQL... attempt $i/10"
            sleep 2
          done

      - name: Setup test database
        env:
          PGPASSWORD: postgres
        run: |
          psql -h localhost -U postgres -c "CREATE DATABASE test_rescue_dogs;" || true
          psql -h localhost -U postgres -d test_rescue_dogs -c "GRANT ALL PRIVILEGES ON DATABASE test_rescue_dogs TO postgres;" || true
          psql -h localhost -U postgres -d test_rescue_dogs -c "GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO postgres;" || true
          psql -h localhost -U postgres -d test_rescue_dogs -c "GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO postgres;" || true

      - name: Initialize database schema
        env:
          TESTING: "true"
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: test_rescue_dogs
          DB_USER: postgres
          DB_PASSWORD: postgres
          PYTHONPATH: ${{ github.workspace }}
        run: |
          python -c "
          from database.db_setup import initialize_database
          conn = initialize_database()
          if conn:
              print('Database schema initialized successfully')
              conn.close()
          else:
              print('Database initialization failed')
              exit(1)
          " || echo "Database initialization completed or already initialized"

      - name: Run database migrations
        env:
          TESTING: "true"
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: test_rescue_dogs
          DB_USER: postgres
          DB_PASSWORD: postgres
          PGPASSWORD: postgres
        run: |
          echo "Running database migrations..."
          for migration in database/migrations/*.sql; do
            if [ -f "$migration" ]; then
              echo "Running migration: $(basename $migration)"
              psql -h localhost -U postgres -d test_rescue_dogs -f "$migration" || echo "Migration $(basename $migration) may have already been applied"
            fi
          done

      - name: Verify pytest configuration
        run: |
          pytest --markers | grep -E "(unit|integration|slow|browser|external)"

      - name: Run Tier 2 CI Tests
        env:
          TESTING: "true"
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: test_rescue_dogs
          DB_USER: postgres
          DB_PASSWORD: postgres
          PYTHONPATH: ${{ github.workspace }}
          CI: true
        run: |
          pytest \
            -m "not slow and not browser and not external" \
            --maxfail=3 \
            --tb=short \
            --durations=10 \
            --cov=api \
            --cov=scrapers \
            --cov=services \
            --cov=utils \
            --cov-report=xml \
            --cov-report=term-missing \
            --junit-xml=test-results.xml \
            --disable-warnings

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: success()
        with:
          file: ./coverage.xml
          flags: backend-tier2
          name: tier2-coverage

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            test-results.xml
            coverage.xml

      - name: Performance Check
        if: success()
        run: |
          echo "✅ Tier 2 CI Pipeline completed successfully"
          echo "📊 Expected: ~951 tests in <5 minutes"
          echo "🚀 Ready for merge review"

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: |
          npm test -- --coverage --watchAll=false --maxWorkers=2

      - name: Build check
        run: npm run build

  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: always()

    steps:
      - name: Check CI Results
        run: |
          if [[ "${{ needs.backend-tests.result }}" != "success" ]] || [[ "${{ needs.frontend-tests.result }}" != "success" ]]; then
            echo "❌ CI Pipeline failed - PR cannot be merged"
            exit 1
          else
            echo "✅ All Tier 2 tests passed - PR ready for review"
          fi
