# Pre-merge - Tier 3: Comprehensive testing before merging to main
# Target: <10 minutes execution time
# Scope: 1,444 tests excluding migration-dependent tests

name: Tier 3 - Pre-merge Validation

on:
  pull_request:
    branches: [main]
    types: [ready_for_review, synchronize]
  workflow_dispatch:

jobs:
  comprehensive-backend-tests:
    name: Pre-merge Backend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_rescue_dogs
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pytest_cache
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ matrix.python-version }}-
            ${{ runner.os }}-python-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Wait for PostgreSQL
        run: |
          for i in {1..10}; do
            if pg_isready -h localhost -p 5432; then
              echo "PostgreSQL is ready"
              break
            fi
            echo "Waiting for PostgreSQL... attempt $i/10"
            sleep 2
          done

      - name: Setup test database
        env:
          PGPASSWORD: postgres
        run: |
          psql -h localhost -U postgres -c "CREATE DATABASE test_rescue_dogs;" || true
          psql -h localhost -U postgres -d test_rescue_dogs -c "GRANT ALL PRIVILEGES ON DATABASE test_rescue_dogs TO postgres;" || true
          psql -h localhost -U postgres -d test_rescue_dogs -c "GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO postgres;" || true
          psql -h localhost -U postgres -d test_rescue_dogs -c "GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO postgres;" || true

      - name: Initialize database schema
        env:
          TESTING: "true"
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: test_rescue_dogs
          DB_USER: postgres
          DB_PASSWORD: postgres
          PYTHONPATH: ${{ github.workspace }}
        run: |
          python -c "
          from database.db_setup import initialize_database
          conn = initialize_database()
          if conn:
              print('Database schema initialized successfully')
              conn.close()
          else:
              print('Database initialization failed')
              exit(1)
          " || echo "Database initialization completed or already initialized"

      - name: Run database migrations
        env:
          TESTING: "true"
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: test_rescue_dogs
          DB_USER: postgres
          DB_PASSWORD: postgres
          PGPASSWORD: postgres
        run: |
          echo "Running database migrations..."
          for migration in database/migrations/*.sql; do
            if [ -f "$migration" ]; then
              echo "Running migration: $(basename $migration)"
              psql -h localhost -U postgres -d test_rescue_dogs -f "$migration" || echo "Migration $(basename $migration) may have already been applied"
            fi
          done

      - name: Run Tier 3 Pre-merge Tests
        env:
          TESTING: "true"
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: test_rescue_dogs
          DB_USER: postgres
          DB_PASSWORD: postgres
          REDIS_URL: redis://localhost:6379/0
          PYTHONPATH: ${{ github.workspace }}
          CI: true
          TEST_ENVIRONMENT: pre-merge
        run: |
          pytest \
            -m "not requires_migrations" \
            --maxfail=1 \
            --tb=short \
            --durations=20 \
            --cov=api \
            --cov=scrapers \
            --cov=services \
            --cov=utils \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-report=html:htmlcov \
            --junit-xml=test-results-pre-merge.xml \
            --disable-warnings \
            -x

      - name: Upload comprehensive coverage
        uses: codecov/codecov-action@v4
        if: success()
        with:
          file: ./coverage.xml
          flags: backend-tier3-pre-merge
          name: comprehensive-coverage

      - name: Archive coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports-${{ matrix.python-version }}
          path: |
            coverage.xml
            htmlcov/
            test-results-pre-merge.xml

      - name: Performance Analysis
        if: success()
        run: |
          echo "‚úÖ Tier 3 Pre-merge validation completed successfully"
          echo "üìä Expected: ~1,444 tests in <10 minutes"
          echo "üéØ Comprehensive coverage achieved"
          echo "üöÄ Ready for main branch merge"

  comprehensive-frontend-tests:
    name: Pre-merge Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 12
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run comprehensive tests
        run: |
          npm test -- --coverage --watchAll=false --maxWorkers=2 --verbose

      - name: Type checking
        run: npx tsc --noEmit

      - name: Linting
        run: npm run lint

      - name: Build validation
        run: npm run build

      - name: E2E smoke tests (critical paths only)
        run: |
          npm run test:e2e:ci -- --grep "smoke|critical"

  security-scan:
    name: Security Validation
    runs-on: ubuntu-latest
    timeout-minutes: 8

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security tests
        run: |
          source venv/bin/activate 2>/dev/null || python -m venv venv && source venv/bin/activate
          pip install -r requirements.txt -r requirements-dev.txt
          pytest tests/security/ -v --tb=short

      - name: Dependency vulnerability check
        run: |
          pip install safety
          safety check --json --output safety-report.json || true

      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: safety-report.json

  merge-readiness:
    name: Merge Readiness Check
    runs-on: ubuntu-latest
    needs:
      [comprehensive-backend-tests, comprehensive-frontend-tests, security-scan]
    if: always()

    steps:
      - name: Validate merge readiness
        run: |
          backend_result="${{ needs.comprehensive-backend-tests.result }}"
          frontend_result="${{ needs.comprehensive-frontend-tests.result }}"
          security_result="${{ needs.security-scan.result }}"

          if [[ "$backend_result" != "success" ]] || [[ "$frontend_result" != "success" ]] || [[ "$security_result" != "success" ]]; then
            echo "‚ùå Pre-merge validation failed"
            echo "Backend: $backend_result"
            echo "Frontend: $frontend_result"
            echo "Security: $security_result"
            echo "üö´ PR cannot be merged to main"
            exit 1
          else
            echo "‚úÖ All Tier 3 pre-merge validations passed"
            echo "üéØ Comprehensive test coverage achieved"
            echo "üîí Security validation passed"
            echo "üöÄ PR approved for merge to main branch"
          fi
