name: Run Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  backend-tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_rescue_dogs
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          else
            pip install -r requirements.txt
            pip install pytest pytest-cov pytest-mock pytest-asyncio black isort flake8
          fi

      - name: Wait for PostgreSQL
        run: |
          for i in {1..10}; do
            if pg_isready -h localhost -p 5432; then
              echo "PostgreSQL is ready"
              break
            fi
            echo "Waiting for PostgreSQL... attempt $i/10"
            sleep 2
          done

      - name: Setup test database
        env:
          PGPASSWORD: postgres
        run: |
          psql -h localhost -U postgres -c "CREATE DATABASE test_rescue_dogs;" || true
          psql -h localhost -U postgres -d test_rescue_dogs -c "GRANT ALL PRIVILEGES ON DATABASE test_rescue_dogs TO postgres;" || true
          psql -h localhost -U postgres -d test_rescue_dogs -c "GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO postgres;" || true
          psql -h localhost -U postgres -d test_rescue_dogs -c "GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO postgres;" || true

      - name: Initialize database schema
        env:
          TESTING: "true"
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: test_rescue_dogs
          DB_USER: postgres
          DB_PASSWORD: postgres
          PYTHONPATH: ${{ github.workspace }}
        run: |
          python -c "
          from database.db_setup import initialize_database
          conn = initialize_database()
          if conn:
              print('Database schema initialized successfully')
              conn.close()
          else:
              print('Database initialization failed')
              exit(1)
          " || echo "Database initialization completed or already initialized"

      - name: Run database migrations
        env:
          TESTING: "true"
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: test_rescue_dogs
          DB_USER: postgres
          DB_PASSWORD: postgres
          PGPASSWORD: postgres
        run: |
          echo "Running database migrations..."
          for migration in database/migrations/*.sql; do
            if [ -f "$migration" ]; then
              echo "Running migration: $(basename $migration)"
              psql -h localhost -U postgres -d test_rescue_dogs -f "$migration" || echo "Migration $(basename $migration) may have already been applied"
            fi
          done

      - name: Run backend tests
        env:
          TESTING: "true"
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: test_rescue_dogs
          DB_USER: postgres
          DB_PASSWORD: postgres
          PYTHONPATH: ${{ github.workspace }}
        run: |
          python -m pytest tests/ -m "not browser and not requires_migrations" -v

  frontend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"

      - name: Create .env.example if missing
        run: |
          if [ ! -f .env.example ]; then
            echo "# Environment variables for development" > .env.example
            echo "NEXT_PUBLIC_API_URL=http://localhost:8000" >> .env.example
            echo "NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=dy8y3boog" >> .env.example
          fi

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000
          NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME: dy8y3boog
          CI: true
          NODE_ENV: test
        run: npm test -- --watchAll=false --passWithNoTests --silent
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [frontend-tests] # Run after frontend tests succeed
    timeout-minutes: 10

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_rescue_dogs
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          else
            pip install -r requirements.txt
          fi

      - name: Install Node.js dependencies
        working-directory: frontend
        run: npm ci

      - name: Wait for PostgreSQL
        run: |
          for i in {1..10}; do
            if pg_isready -h localhost -p 5432; then
              echo "PostgreSQL is ready"
              break
            fi
            echo "Waiting for PostgreSQL... attempt $i/10"
            sleep 2
          done

      - name: Setup test database
        env:
          PGPASSWORD: postgres
        run: |
          psql -h localhost -U postgres -c "CREATE DATABASE test_rescue_dogs;" || true
          psql -h localhost -U postgres -d test_rescue_dogs -c "GRANT ALL PRIVILEGES ON DATABASE test_rescue_dogs TO postgres;" || true

      - name: Initialize database schema
        env:
          TESTING: "true"
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: test_rescue_dogs
          DB_USER: postgres
          DB_PASSWORD: postgres
          PYTHONPATH: ${{ github.workspace }}
        run: |
          python -c "
          from database.db_setup import initialize_database
          conn = initialize_database()
          if conn:
              print('Database schema initialized successfully')
              conn.close()
          else:
              print('Database initialization failed')
              exit(1)
          " || echo "Database initialization completed or already initialized"

      - name: Run database migrations
        env:
          TESTING: "true"
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: test_rescue_dogs
          DB_USER: postgres
          DB_PASSWORD: postgres
          PGPASSWORD: postgres
        run: |
          echo "Running database migrations..."
          for migration in database/migrations/*.sql; do
            if [ -f "$migration" ]; then
              echo "Running migration: $(basename $migration)"
              psql -h localhost -U postgres -d test_rescue_dogs -f "$migration" || echo "Migration $(basename $migration) may have already been applied"
            fi
          done

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json') }}-v1
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Install Playwright browsers
        working-directory: frontend
        run: npx playwright install --with-deps chromium webkit

      - name: Install wait-on for service coordination
        working-directory: frontend
        run: npm install --no-save wait-on

      - name: Start backend API server
        env:
          TESTING: "true"
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: test_rescue_dogs
          DB_USER: postgres
          DB_PASSWORD: postgres
          PYTHONPATH: ${{ github.workspace }}
        run: |
          # Start the FastAPI backend server
          python -m uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload &
          BACKEND_PID=$!
          echo "Started backend server with PID: $BACKEND_PID"

          # Wait for backend to be ready
          for i in {1..30}; do
            if curl -f http://localhost:8000/health 2>/dev/null; then
              echo "Backend API is ready"
              break
            fi
            echo "Waiting for backend API... attempt $i/30"
            sleep 2
          done

      - name: Run critical E2E tests with proper service startup
        working-directory: frontend
        env:
          CI: true
          E2E_SELECTOR_STRATEGY: strict
          NEXT_PUBLIC_API_URL: http://localhost:8000
        run: |
          # Start dev server and wait for it to be ready before running tests
          npm run dev &
          DEV_PID=$!
          echo "Started dev server with PID: $DEV_PID"

          # Wait for frontend to be ready
          npx wait-on http://localhost:3000 --timeout 120000 --interval 2000

          # Run the tests
          npm run test:e2e:optimized:critical:ci

          # Clean up
          kill $DEV_PID || true

      - name: Upload test results on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results-${{ github.run_id }}
          path: |
            frontend/test-results/
            frontend/playwright-report/
            frontend/e2e-failures.txt
          retention-days: 3
